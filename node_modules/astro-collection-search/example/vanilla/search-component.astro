---

/**
 * some props used by the demo site. all optional.
 */
interface Props {

  /** hide the note */
  'hide-note'?: boolean;

  /** max results to show */
  max?: number;

  /** score threshold */
  threshold?: number;

}

const props = Astro.props;

---
<script>

import { type CollectionSearchResult, Search } from 'astro-collection-search';
import '../search-component.css';
import { undefined } from 'astro:schema';

document.addEventListener('DOMContentLoaded', () => {

  const component = document.querySelector('.search-component') as HTMLElement;
  const max = component.dataset.max ? Number(component.dataset.max) : 0;
  const threshold = component.dataset.threshold ? Number(component.dataset.threshold) : 0;

  const input = component.querySelector('.query') as HTMLInputElement;
  const results = component.querySelector('.results') as HTMLElement;
  const template = component.querySelector('.result-template') as HTMLTemplateElement;

  /**
   * construct link from search result.
   */
  const CreateLink = (result: CollectionSearchResult) => {
    return ('/' + result.collection + '/' + result.file.replace(/\.mdx{0,1}$/, '')).toLowerCase();
  };

  /** 
   * fill in template content 
   */
  const SetContent = (root: HTMLElement, data: Record<string, string|{ text: string, attributes: Record<string, string>}>) => {
    for (const [key, value] of Object.entries(data)) {
      const element = root.querySelector(`[data-target=${key}]`);
      if (element) {
        if (typeof value === 'string') {
          element.textContent = value;
        }
        else {
          element.textContent = value.text;
          for (const attribute of Object.entries(value.attributes)) {
            element.setAttribute(...attribute);
          }
        }
      }
    }
    return root; // fluent
  };

  /** 
   * create list of results, using template.
   */
  const PopulateResults = (list: CollectionSearchResult[]) => {

    if (threshold) {
      list = list.filter(test => test.score >= threshold);
    }
    if (max) {
      list = list.slice(0, max);
    }

    if (!list.length) {
      results.textContent = 'Your search returned no results.';
    }
    else {

      results.textContent = '';
      results.append(...list.map(result => {
        const clone = template.content.cloneNode(true) as HTMLElement;

        SetContent(clone, {
          title: { text: result.frontmatter.title || 'No title', attributes: { href: CreateLink(result) }},
          description: result.frontmatter.description || 'No description',
          file: result.file,
          collection: result.collection,
          score: result.score.toString(),
        });

        const frontmatter = clone.querySelector('.frontmatter-container') as HTMLElement;
        const row_template = clone.querySelector('.frontmatter-row') as HTMLTemplateElement;
        if (frontmatter && row_template) {
          for (const [key, value] of Object.entries(result.frontmatter)) {
            const row = row_template.content.cloneNode(true) as HTMLElement;
            frontmatter.append(SetContent(row, { key, value }));
          }
        }

        return clone;
      }));
    }
  };

  /**
   * run the query on key events
   */
  input.addEventListener('input', async () => {
    const query = input.value.trim();
    if (query) {
      const list = await Search(query);
      sessionStorage.setItem('results', JSON.stringify(list));
      PopulateResults(list);
      sessionStorage.setItem('query', query);
    }
    else {
      results.textContent = '';
      sessionStorage.setItem('query', '');
      sessionStorage.setItem('results', JSON.stringify([]));
    }
  });

  /**
   * fill in last query and show last results, if any
   */
  if (typeof sessionStorage !== 'undefined') {
    input.value = sessionStorage.getItem('query') || '';
    const json = sessionStorage.getItem('results');
    if (json) {
      try {
        const list = JSON.parse(json);
        if (Array.isArray(list) && list.length) {
          PopulateResults(list);
        }
      }
      catch (err) {
        console.error(err);
      }
    }
  }

});

</script>

<div class="search-component" data-max=`${props.max}` data-threshold=`${props.threshold}`>

  {!props['hide-note'] &&
    <p class="note">
      Note: links in search results may not work. That's because we index
      collections, not pages, and we don't necessarily know how your pages
      are organized. We're just guessing that links are 
      <code>collection/filename</code>. If they're not, you probably need
      to change the <code>CreateLink</code> method in the search component.
    </p>
  }

  <!-- input -->
  <input class="query" placeholder="Search">

  <!-- results list -->
  <div class="results"></div>

  <!-- template for search results -->
  <template class="result-template">
    <div class="search-result">
      
      <h1 class="title"><a data-target="title"/></h1>
      <div class="description" data-target="description"></div>

      <details class="details">
        <summary>Search result details</summary>
        <div class="grid">
          
          <h3 class="details-header">Collection info</h3>
          <div class="row">
            <span>Collection</span><span data-target="collection"/>
            <span>File</span></span><span data-target="file"/>
          </div>

          <h3 class="details-header">Frontmatter</h3>
          <div class="frontmatter-container">
            <template class="frontmatter-row">
              <span data-target="key"></span>
              <span data-target="value"></span>
            </template>
          </div>

          <h3 class="details-header">Metadata</h3>
          <div class="row">
            <span>Score</span><span data-target="score"/>
          </div>
      </details>

    </div>
  </template>

</div>


